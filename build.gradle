/*
 * Apache License, Version 2.0
 *
 * You may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

version = '0.7.0'
archivesBaseName = "multitests-junit4"
group = 'com.github.rrrekin'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext {
    // Dependencies versions
    junitVersion = '4.11'
    mockitoVersion = '2.2.9'
}

dependencies {
    compile "junit:junit:$junitVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}

jar {
    manifest {
        attributes(
                "Version": "${project.version}",
                "Build-Date": new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'documentation'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourceJar(type: Jar) {
    group = 'documentation'
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourceJar
}

signing {
    required {
        signing.hasProperty('keyId') && signing.hasProperty('password') && signing.hasProperty('secretKeyRingFile') && gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

uploadArchives {
    def user = project.hasProperty('ossrhUsername')?ossrhUsername:''
    def pass = project.hasProperty('ossrhPassword')?ossrhPassword:''
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: user, password: pass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: user, password: pass)
            }

            pom.project {
                name 'multitests JUnit4 library'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'JUnit 4 rule and annotations to multiple test execution: repeat, retry and run in parallel.'
                url 'https://github.com/rrrekin/multitests'

                scm {
                    connection 'scm:git:https://github.com/rrrekin/multitests.git'
                    developerConnection 'scm:git@github.com:rrrekin/multitests.git'
                    url 'https://github.com/rrrekin/multitests'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'rrrekin'
                        name 'Michal Rudewicz'
                        email 'michal.rudewicz@gmail.com'
                    }
                }
            }
        }
    }
}


checkstyle {
    // last JDK6 compatible
    toolVersion '6.1.1'
    sourceSets = [sourceSets.main]
}

jacoco.toolVersion = '0.7.7.201606060606'

jacocoTestReport {
    group = 'verification'
    reports {
        xml.enabled true
        csv.enabled false
    }
}

wrapper {
    gradleVersion = '2.14'
}

