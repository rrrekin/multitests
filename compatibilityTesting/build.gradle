/*
 * Apache License, Version 2.0
 *
 * You may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'

repositories {
    mavenCentral()
}

def testedVersion = rootProject.version
//def testedVersion = '0.7.0'
def testedJdk = System.getProperty('java.version')
def jdkVendor = System.getProperty('java.vm.vendor')

def junitTestedVersion = project.hasProperty('junit') ? junit : '4.+'

def reportsDirectory = "reports" as File

dependencies {
    testCompile "junit:junit:$junitTestedVersion"
    testCompile "com.github.rrrekin:multitests-junit4:${testedVersion}"
}

build.dependsOn('copyTestResults')

test {
    ignoreFailures = true
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

task buildTestReport {
    doLast {
        reportsDirectory.mkdirs()
        def destFile = new File(reportsDirectory, "test_report_${testedVersion}_JDK${testedJdk}_junit-${junitTestedVersion}.md")
        destFile.text = "# Compatibility test results for multitests library v. ${testedVersion} using JUnit v. ${junitTestedVersion} and Java ${testedJdk} from ${jdkVendor}\n"

        def files = fileTree("$buildDir/test-results").include('*.xml')

        def compatible = true
        files.each { srcFile ->
            def testResults = new XmlSlurper().parse(srcFile)
            testResults.testcase.each { testcase ->
                def name = testcase.@name
                def className = (testcase.@classname as String).replaceFirst(/.*\./, '')
                def skipped = testcase.skipped.size() != 0
                def failed = testcase.failure.size() != 0
                def message = '**OK**'
                if (failed) {
                    compatible = false
                    message = "**FAILED**: ${testcase.failure.@message}"
                } else if (skipped) {
                    message = '~~skipped~~'
                }
                destFile << "- $className.$name -> $message\n"
            }
        }
        destFile << "\n\nCompatible: ${compatible ? 'YES' : 'NO'}\n"
    }
}

buildTestReport.dependsOn(test)
